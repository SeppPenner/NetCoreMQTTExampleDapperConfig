<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetCoreMQTTExampleDapperConfig</name>
    </assembly>
    <members>
        <member name="T:NetCoreMQTTExampleDapperConfig.Controllers.BlacklistController">
            <summary>
                The blacklist controller class.
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.Controllers.BlacklistController.blacklistRepository">
            <summary>
                The blacklist repository.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.Controllers.BlacklistController.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.BlacklistController.#ctor(Serilog.ILogger,Storage.Repositories.Interfaces.IBlacklistRepository)">
            <summary>
                Initializes a new instance of the <see cref="T:NetCoreMQTTExampleDapperConfig.Controllers.BlacklistController" /> class.
            </summary>
            <param name="logger">The <see cref="T:Serilog.ILogger"/>.</param>
            <param name="blacklistRepository">The <see cref="T:Storage.Repositories.Interfaces.IBlacklistRepository" />.</param>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.BlacklistController.GetAllBlacklistItems">
            <summary>
                Gets all blacklist items.
            </summary>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Gets all blacklist items.
            </remarks>
            <response code="200">Blacklist items found.</response>
            <response code="401">Unauthorized.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.BlacklistController.GetBlacklistItemById(System.Guid)">
            <summary>
                Gets a blacklist item by its id.
            </summary>
            <param name="blacklistItemId">
                The blacklist item identifier.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Gets a blacklist item by its id.
            </remarks>
            <response code="200">Blacklist item found.</response>
            <response code="401">Unauthorized.</response>
            <response code="404">Blacklist item not found.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.BlacklistController.CreateBlacklistItem(Storage.Database.BlacklistWhitelist)">
            <summary>
                Creates a blacklist item.
            </summary>
            <param name="createBlacklistItem">
                The create blacklist item.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Creates a blacklist item.
            </remarks>
            <response code="200">Blacklist item created.</response>
            <response code="400">Blacklist item not created.</response>
            <response code="401">Unauthorized.</response>
            <response code="409">Blacklist item already exists.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.BlacklistController.DeleteBlacklistItemById(System.Guid)">
            <summary>
                Deletes a blacklist item by its id.
            </summary>
            <param name="blacklistItemId">
                The blacklist item identifier.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Deletes a blacklist item by its id.
            </remarks>
            <response code="200">Blacklist item deleted.</response>
            <response code="400">Blacklist item not deleted.</response>
            <response code="401">Unauthorized.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="T:NetCoreMQTTExampleDapperConfig.Controllers.Extensions.ControllerBaseExtensions">
            <summary>
                Some extension methods for the <see cref="T:Microsoft.AspNetCore.Mvc.ControllerBase"></see> class.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.Extensions.ControllerBaseExtensions.InternalServerError(Microsoft.AspNetCore.Mvc.ControllerBase,System.Exception)">
            <summary>
                Returns a 500 internal server error.
            </summary>
            <param name="controllerBase">The controller base.</param>
            <param name="ex">The exception.</param>
            <returns>A <seealso cref="T:Microsoft.AspNetCore.Mvc.ObjectResult" />.</returns>
        </member>
        <member name="T:NetCoreMQTTExampleDapperConfig.Controllers.UserController">
            <summary>
                The user controller class.
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.Controllers.UserController.autoMapper">
            <summary>
                The auto mapper.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.Controllers.UserController.passwordHasher">
            <summary>
                The password hasher.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.Controllers.UserController.userRepository">
            <summary>
                The user repository.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.Controllers.UserController.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.UserController.#ctor(Serilog.ILogger,AutoMapper.IMapper,Storage.Repositories.Interfaces.IUserRepository)">
            <summary>
                Initializes a new instance of the <see cref="T:NetCoreMQTTExampleDapperConfig.Controllers.UserController" /> class.
            </summary>
            <param name="logger">The <see cref="T:Serilog.ILogger"/>.</param>
            <param name="autoMapper">The <see cref="T:AutoMapper.IMapper" />.</param>
            <param name="userRepository">The <see cref="T:Storage.Repositories.Interfaces.IUserRepository" />.</param>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.UserController.GetUsers">
            <summary>
                Gets all users.
            </summary>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Gets all users.
            </remarks>
            <response code="200">Users found.</response>
            <response code="401">Unauthorized.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.UserController.GetUserById(System.Guid)">
            <summary>
                Gets a user by their id.
            </summary>
            <param name="userId">
                The user identifier.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Gets a user by their id.
            </remarks>
            <response code="200">User found.</response>
            <response code="401">Unauthorized.</response>
            <response code="404">User not found.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.UserController.CreateUser(Storage.Dto.DtoCreateUpdateUser)">
            <summary>
                Creates a user.
            </summary>
            <param name="createUser">
                The create user.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Creates a user.
            </remarks>
            <response code="200">User created.</response>
            <response code="400">User not created.</response>
            <response code="401">Unauthorized.</response>
            <response code="409">User already exists.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.UserController.UpdateUser(System.Guid,Storage.Dto.DtoCreateUpdateUser)">
            <summary>
                Updates a user.
            </summary>
            <param name="userId">
                The user identifier.
            </param>
            <param name="updateUser">
                The update user.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Updates a user.
            </remarks>
            <response code="200">User updated.</response>
            <response code="400">User not updated.</response>
            <response code="401">Unauthorized.</response>
            <response code="404">User not found.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.UserController.DeleteUserById(System.Guid)">
            <summary>
                Deletes the user by their id.
            </summary>
            <param name="userId">
                The user identifier.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Deletes a user by their id.
            </remarks>
            <response code="200">User deleted.</response>
            <response code="400">User not deleted.</response>
            <response code="401">Unauthorized.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="T:NetCoreMQTTExampleDapperConfig.Controllers.WhitelistController">
            <summary>
                The whitelist controller class.
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.Controllers.WhitelistController.whitelistRepository">
            <summary>
                The whitelist repository.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.Controllers.WhitelistController.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.WhitelistController.#ctor(Serilog.ILogger,Storage.Repositories.Interfaces.IWhitelistRepository)">
            <summary>
                Initializes a new instance of the <see cref="T:NetCoreMQTTExampleDapperConfig.Controllers.WhitelistController" /> class.
            </summary>
            <param name="logger">The <see cref="T:Serilog.ILogger"/>.</param>
            <param name="whitelistRepository">The <see cref="T:Storage.Repositories.Interfaces.IWhitelistRepository" />.</param>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.WhitelistController.GetAllWhitelistItems">
            <summary>
                Gets all whitelist items.
            </summary>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Gets all whitelist items.
            </remarks>
            <response code="200">Whitelist items found.</response>
            <response code="401">Unauthorized.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.WhitelistController.GetWhitelistItemById(System.Guid)">
            <summary>
                Gets a whitelist item by its id.
            </summary>
            <param name="whitelistItemId">
                The whitelist item identifier.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Gets a whitelist item by its id.
            </remarks>
            <response code="200">Whitelist item found.</response>
            <response code="401">Unauthorized.</response>
            <response code="404">Whitelist item not found.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.WhitelistController.CreateWhitelistItem(Storage.Database.BlacklistWhitelist)">
            <summary>
                Creates a whitelist item.
            </summary>
            <param name="createWhitelistItem">
                The create whitelist item.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Creates a whitelist item.
            </remarks>
            <response code="200">Whitelist item created.</response>
            <response code="400">Whitelist item not created.</response>
            <response code="401">Unauthorized.</response>
            <response code="409">Whitelist item already exists.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Controllers.WhitelistController.DeleteWhitelistItemById(System.Guid)">
            <summary>
                Deletes a whitelist item by its id.
            </summary>
            <param name="whitelistItemId">
                The whitelist item identifier.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.
            </returns>
            <remarks>
                Deletes a whitelist item by its id.
            </remarks>
            <response code="200">Whitelist item deleted.</response>
            <response code="400">Whitelist item not deleted.</response>
            <response code="401">Unauthorized.</response>
            <response code="500">Internal server error.</response>
        </member>
        <member name="T:NetCoreMQTTExampleDapperConfig.DateTimeExtensions">
            <summary>
                A class that contains extension method for the <see cref="T:System.DateTime" /> data type.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.DateTimeExtensions.GetTimeZoneOffset(System.DateTime)">
            <summary>
                Gets the time zone offset of the local time zone.
            </summary>
            <param name="date">The date to get the time zone offset from.</param>
            <returns>The time zone offset of the local time zone</returns>
        </member>
        <member name="T:NetCoreMQTTExampleDapperConfig.DateTimeOffsetExtensions">
            <summary>
                A class that contains extension method for the <see cref="T:System.DateTimeOffset" /> data type.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.DateTimeOffsetExtensions.EndOfCurrentMonth(System.DateTimeOffset)">
            <summary>
                Gets the end of the current month.
            </summary>
            <param name="date">The date to get the current month end from.</param>
            <returns>A new <see cref="T:System.DateTimeOffset" /> that represents the end of the current month.</returns>
        </member>
        <member name="T:NetCoreMQTTExampleDapperConfig.LoggerConfig">
            <summary>
            A class that contains the main logger configuration.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.LoggerConfig.GetLoggerConfiguration(System.String)">
            <summary>
            Gets the logger configuration.
            </summary>
            <param name="type">The logger type.</param>
            <returns>The <see cref="T:Serilog.LoggerConfiguration"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the logger type is null.</exception>
        </member>
        <member name="T:NetCoreMQTTExampleDapperConfig.MqttService">
            <inheritdoc cref="T:Microsoft.Extensions.Hosting.BackgroundService"/>
            <summary>
                The main service class of the <see cref="T:NetCoreMQTTExampleDapperConfig.MqttService" />.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.MqttService.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.MqttService.serviceName">
            <summary>
            The service name.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.MqttService.certificate">
            <summary>
            The certificate.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.MqttService.userRepository">
            <summary>
            The user repository.
            </summary>
        </member>
        <member name="P:NetCoreMQTTExampleDapperConfig.MqttService.BytesDivider">
            <summary>
            The bytes divider. (Used to convert from bytes to kilobytes and so on).
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.MqttService.Hasher">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.PasswordHasher`1" />.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.MqttService.DataLimitCacheMonth">
            <summary>
            The data limit cache for throttling for monthly data.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.MqttService.clientIds">
            <summary>
            The client identifiers.
            </summary>
        </member>
        <member name="P:NetCoreMQTTExampleDapperConfig.MqttService.MqttServiceConfiguration">
            <summary>
            Gets or sets the MQTT service configuration.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.#ctor(Storage.MqttSettings,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,Storage.Repositories.Implementation.UserRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:NetCoreMQTTExampleDapperConfig.MqttService"/> class.
            </summary>
            <param name="mqttServiceConfiguration">The MQTT service configuration.</param>
            <param name="serviceName">The service name.</param>
            <param name="certificate">The certificate.</param>
            <param name="userRepository">The user repository.</param>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="T:Microsoft.Extensions.Hosting.BackgroundService"/>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="T:Microsoft.Extensions.Hosting.BackgroundService"/>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="T:Microsoft.Extensions.Hosting.BackgroundService"/>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.IsUserThrottled(System.String,System.Int64,System.Int64)">
            <summary>
                Checks whether a user has used the maximum of its publishing limit for the month or not.
            </summary>
            <param name="clientId">The client identifier.</param>
            <param name="sizeInBytes">The message size in bytes.</param>
            <param name="monthlyByteLimit">The monthly byte limit.</param>
            <returns>A value indicating whether the user will be throttled or not.</returns>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.GetClientIdPrefix(System.String)">
            <summary>
                Gets the client id prefix for a client id if there is one or <c>null</c> else.
            </summary>
            <param name="clientId">The client id.</param>
            <returns>The client id prefix for a client id if there is one or <c>null</c> else.</returns>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.ValidateConnectionAsync(MQTTnet.Server.ValidatingConnectionEventArgs)">
            <summary>
            Validates the MQTT connection.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.InterceptSubscriptionAsync(MQTTnet.Server.InterceptingSubscriptionEventArgs)">
            <summary>
            Validates the MQTT subscriptions.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.InterceptApplicationMessagePublishAsync(MQTTnet.Server.InterceptingPublishEventArgs)">
            <summary>
            Validates the MQTT application messages.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.ClientDisconnectedAsync(MQTTnet.Server.ClientDisconnectedEventArgs)">
            <summary>
            Handles the client connected event.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.StartMqttServer">
            <summary>
            Starts the MQTT server.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.LogMessage(MQTTnet.Server.InterceptingSubscriptionEventArgs,System.Boolean)">
            <summary> 
                Logs the message from the MQTT subscription interceptor context. 
            </summary> 
            <param name="args">The arguments.</param>
            <param name="successful">A <see cref="T:System.Boolean"/> value indicating whether the subscription was successful or not.</param>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.LogMessage(MQTTnet.Server.InterceptingPublishEventArgs)">
            <summary>
                Logs the message from the MQTT message interceptor context.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.LogMessage(MQTTnet.Server.ValidatingConnectionEventArgs,System.Boolean)">
            <summary> 
                Logs the message from the MQTT connection validation context. 
            </summary> 
            <param name="args">The arguments.</param>
            <param name="showPassword">A <see cref="T:System.Boolean"/> value indicating whether the password is written to the log or not.</param>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.MqttService.LogMemoryInformation">
            <summary>
            Logs the heartbeat message with some memory information.
            </summary>
        </member>
        <member name="T:NetCoreMQTTExampleDapperConfig.Program">
            <summary>
                The main program class.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Program.Main(System.String[])">
            <summary>
                Defines the entry point of the application.
            </summary>
            <param name="args">The arguments.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing any asynchronous operation.</returns>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Program.CreateHostBuilder(System.String[],System.String)">
            <summary>
            Creates the host builder.
            </summary>
            <param name="args">The arguments.</param>
            <param name="currentLocation">The current assembly location.</param>
            <returns>A new <see cref="T:Microsoft.Extensions.Hosting.IHostBuilder"/>.</returns>
        </member>
        <member name="T:NetCoreMQTTExampleDapperConfig.Startup">
            <summary>
                The startup class.
            </summary>
        </member>
        <member name="F:NetCoreMQTTExampleDapperConfig.Startup.serviceName">
            <summary>
            The service name.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Initializes a new instance of the <see cref="T:NetCoreMQTTExampleDapperConfig.Startup" /> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:NetCoreMQTTExampleDapperConfig.Startup.Configuration">
            <summary>
                Gets the configuration.
            </summary>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
                Configures the specified application.
            </summary>
            <param name="app">The application.</param>
            <param name="env">The env.</param>
        </member>
        <member name="M:NetCoreMQTTExampleDapperConfig.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Configures the services.
            </summary>
            <param name="services">The services.</param>
        </member>
    </members>
</doc>
